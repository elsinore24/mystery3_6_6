{"version":3,"file":"_page.svelte.js","sources":["../../../../../../src/lib/components/EvidenceBoard.svelte","../../../../../../src/lib/storage.js","../../../../../../src/routes/admin/ImageUploadTest.svelte"],"sourcesContent":["<script>\n  import { activeClues } from '$lib/stores/gameState';\n  import { onMount } from 'svelte';\n  import { interactable } from '$lib/actions/interactable';\n  \n  function getRandomPosition() {\n    return {\n      top: `${Math.random() * 60 + 20}%`,\n      left: `${Math.random() * 60 + 20}%`,\n      transform: `rotate(${Math.random() * 10 - 5}deg)`,\n      '--random': Math.random()\n    };\n  }\n\n  let boardElement;\n  let canvas;\n  let ctx;\n  \n  function handleClueClick(clue) {\n    console.log('Clue clicked:', clue);\n    // Add your click handling logic here\n  }\n  \n  onMount(() => {\n    if (!boardElement) return;\n    \n    canvas = document.createElement('canvas');\n    canvas.style.position = 'absolute';\n    canvas.style.inset = '0';\n    canvas.style.pointerEvents = 'none';\n    canvas.style.zIndex = '1';\n    \n    ctx = canvas.getContext('2d');\n    boardElement.appendChild(canvas);\n    \n    const updateCanvas = () => {\n      const rect = boardElement.getBoundingClientRect();\n      canvas.width = rect.width;\n      canvas.height = rect.height;\n      \n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.strokeStyle = '#ff000055';\n      ctx.lineWidth = 2;\n      \n      $activeClues.forEach(clue => {\n        if (clue.connections) {\n          const sourceEl = document.getElementById(`clue-${clue.id}`);\n          clue.connections.forEach(targetId => {\n            const targetEl = document.getElementById(`clue-${targetId}`);\n            if (sourceEl && targetEl) {\n              const sourceRect = sourceEl.getBoundingClientRect();\n              const targetRect = targetEl.getBoundingClientRect();\n              \n              ctx.beginPath();\n              ctx.moveTo(\n                sourceRect.left - rect.left + sourceRect.width / 2,\n                sourceRect.top - rect.top + sourceRect.height / 2\n              );\n              ctx.lineTo(\n                targetRect.left - rect.left + targetRect.width / 2,\n                targetRect.top - rect.top + targetRect.height / 2\n              );\n              ctx.stroke();\n            }\n          });\n        }\n      });\n    };\n\n    updateCanvas();\n    window.addEventListener('resize', updateCanvas);\n\n    return () => {\n      window.removeEventListener('resize', updateCanvas);\n    };\n  });\n</script>\n\n<div class=\"evidence-board\" bind:this={boardElement}>\n  <div class=\"cork-texture\"></div>\n  <div class=\"board-title\">Evidence Board</div>\n  \n  {#if $activeClues.length === 0}\n    <div class=\"empty-state\">\n      No evidence collected yet...\n    </div>\n  {/if}\n  \n  {#each $activeClues as clue}\n    <div \n      id=\"clue-{clue.id}\"\n      class=\"evidence-note\"\n      use:interactable={{\n        highlight: true,\n        onClick: () => handleClueClick(clue)\n      }}\n      style={Object.entries(getRandomPosition())\n        .map(([k, v]) => `${k}: ${v}`).join(';') + `;background-color: ${clue.color || '#fff9e6'};`}\n    >\n      <div class=\"pin\"></div>\n      <h3 class=\"text-lg font-bold text-burton-charcoal\">{clue.title}</h3>\n      <p class=\"text-sm mt-2\">{clue.description}</p>\n      {#if clue.image}\n        <img src={clue.image} alt=\"\" class=\"mt-2 w-full rounded\">\n      {/if}\n    </div>\n  {/each}\n</div>\n\n<style>\n  .evidence-board {\n    @apply w-[80vw] h-[70vh] relative mx-auto my-8 overflow-hidden;\n    background: #8B4513;\n    border: 12px solid #4a2511;\n    box-shadow: \n      inset 0 0 20px rgba(0,0,0,0.5),\n      0 0 30px rgba(0,0,0,0.3);\n  }\n\n  .board-title {\n    @apply absolute top-4 left-1/2 -translate-x-1/2 text-3xl font-bold;\n    color: #4a2511;\n    text-shadow: 1px 1px 0 #96613d;\n    letter-spacing: 2px;\n  }\n\n  .empty-state {\n    @apply absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2;\n    @apply text-2xl text-[#4a2511] opacity-70 font-bold italic;\n  }\n\n  .cork-texture {\n    @apply absolute inset-0;\n    background-image: \n      radial-gradient(#96613d 15%, transparent 16%),\n      radial-gradient(#96613d 15%, transparent 16%);\n    background-size: 10px 10px;\n    background-position: 0 0, 5px 5px;\n    opacity: 0.5;\n  }\n\n  .evidence-note {\n    @apply absolute p-4 rounded-sm;\n    box-shadow: \n      2px 2px 5px rgba(0,0,0,0.2),\n      0 0 0 1px rgba(0,0,0,0.05);\n    max-width: 250px;\n    transition: all 0.3s ease;\n  }\n\n  .evidence-note:hover {\n    transform: scale(1.05) rotate(0deg) !important;\n    z-index: 10;\n    box-shadow: \n      5px 5px 10px rgba(0,0,0,0.3),\n      0 0 0 1px rgba(0,0,0,0.1);\n  }\n\n  .pin {\n    @apply absolute w-4 h-4 rounded-full;\n    background: radial-gradient(circle at 30% 30%, #ff4444, #cc0000);\n    box-shadow: 0 1px 2px rgba(0,0,0,0.3);\n    top: -8px;\n    left: 50%;\n    transform: translateX(-50%);\n  }\n\n  .pin::after {\n    content: '';\n    @apply absolute w-2 h-2 rounded-full;\n    background: rgba(255,255,255,0.5);\n    top: 20%;\n    left: 20%;\n  }\n</style>\n","import { supabase } from './supabase';\n\nexport async function uploadImage(file, suspectId, fileName) {\n  if (!file || !suspectId || !fileName) {\n    console.error('Upload validation failed:', { file: !!file, suspectId, fileName });\n    throw new Error('Missing required parameters for upload');\n  }\n\n  try {\n    const path = `${suspectId}/${fileName}`;\n    console.log('Starting upload process:', {\n      path,\n      fileSize: file.size,\n      fileType: file.type,\n      lastModified: file.lastModified,\n      suspectId\n    });\n\n    const { data, error } = await supabase.storage\n      .from('suspects')\n      .upload(path, file, {\n        cacheControl: '3600',\n        upsert: true\n      });\n\n    if (error) {\n      console.error('Supabase upload error details:', error);\n      throw error;\n    }\n\n    console.log('Upload completed successfully:', {\n      data,\n      path,\n      fullPath: data?.path,\n      id: data?.id\n    });\n    return data;\n  } catch (error) {\n    console.error('Upload process failed:', error);\n    throw new Error(`Upload failed: ${error.message}`);\n  }\n}\n\nexport async function getImageUrl(path) {\n  if (!path) {\n    throw new Error('Path is required');\n  }\n\n  try {\n    console.log('Getting public URL for:', path);\n    const { data: { publicUrl }, error } = await supabase.storage\n      .from('suspects')\n      .getPublicUrl(path);\n    \n    if (error) {\n      throw error;\n    }\n\n    if (!publicUrl) {\n      throw new Error('No public URL returned');\n    }\n\n    console.log('Public URL generated:', publicUrl);\n    return publicUrl;\n  } catch (error) {\n    console.error('Failed to get image URL:', error);\n    throw error;\n  }\n}\n\nexport async function deleteImage(path) {\n  if (!path) {\n    throw new Error('Path is required');\n  }\n\n  try {\n    const { data, error } = await supabase.storage\n      .from('suspects')\n      .remove([path]);\n    \n    if (error) {\n      throw error;\n    }\n\n    return data;\n  } catch (error) {\n    console.error('Delete operation error:', error);\n    throw error;\n  }\n}\n\nexport async function listSuspectImages(suspectId) {\n  if (!suspectId) {\n    throw new Error('Suspect ID is required');\n  }\n\n  try {\n    const { data, error } = await supabase.storage\n      .from('suspects')\n      .list(suspectId);\n    \n    if (error) {\n      throw error;\n    }\n\n    return data || [];\n  } catch (error) {\n    console.error('List operation error:', error);\n    throw error;\n  }\n}\n","<script>\n  import { uploadImage, getImageUrl, listSuspectImages, deleteImage } from '$lib/storage';\n  import { suspects } from '$lib/data/suspects';\n  \n  let selectedFile;\n  let selectedSuspect = suspects[0];\n  let uploadStatus = '';\n  let imageList = [];\n  let uploadedImageUrl = '';\n\n  async function handleFileSelect(event) {\n    selectedFile = event.target.files[0];\n  }\n\n  async function handleUpload() {\n    try {\n      uploadStatus = 'Uploading...';\n      const fileExt = selectedFile.name.split('.').pop().toLowerCase();\n      const fileName = `profile.${fileExt}`; // Always use profile.jpg or profile.jpeg\n      \n      // Delete existing profile images first\n      const existingImages = await listSuspectImages(selectedSuspect.id);\n      for (const file of existingImages) {\n        if (file.name.startsWith('profile.')) {\n          await deleteImage(`${selectedSuspect.id}/${file.name}`);\n        }\n      }\n      \n      await uploadImage(selectedFile, selectedSuspect.id, fileName);\n      uploadStatus = 'Upload successful!';\n      \n      // Get the URL of the uploaded image\n      const path = `${selectedSuspect.id}/${fileName}`;\n      uploadedImageUrl = await getImageUrl(path);\n      \n      // Refresh the image list\n      await loadImages();\n    } catch (error) {\n      uploadStatus = `Upload failed: ${error.message}`;\n      console.error('Upload error:', error);\n    }\n  }\n\n  async function loadImages() {\n    try {\n      imageList = await listSuspectImages(selectedSuspect.id);\n    } catch (error) {\n      console.error('Failed to load images:', error);\n    }\n  }\n\n  async function handleDelete(fileName) {\n    try {\n      const path = `${selectedSuspect.id}/${fileName}`;\n      await deleteImage(path);\n      await loadImages();\n    } catch (error) {\n      console.error('Delete failed:', error);\n    }\n  }\n\n  $: if (selectedSuspect) {\n    loadImages();\n  }\n</script>\n\n<div class=\"p-4\">\n  <h2 class=\"text-xl font-bold mb-4\">Image Upload Test</h2>\n  \n  <div class=\"mb-4\">\n    <select \n      bind:value={selectedSuspect}\n      class=\"border p-2 rounded\">\n      {#each suspects as suspect}\n        <option value={suspect}>{suspect.name}</option>\n      {/each}\n    </select>\n  </div>\n\n  <div class=\"mb-4\">\n    <input \n      type=\"file\" \n      accept=\"image/jpeg\"\n      on:change={handleFileSelect}\n      class=\"mb-2\">\n    \n    <button \n      on:click={handleUpload}\n      disabled={!selectedFile}\n      class=\"bg-blue-500 text-white px-4 py-2 rounded disabled:opacity-50\">\n      Upload\n    </button>\n  </div>\n\n  {#if uploadStatus}\n    <p class=\"mb-4\">{uploadStatus}</p>\n  {/if}\n\n  {#if uploadedImageUrl}\n    <div class=\"mb-4\">\n      <h3 class=\"font-bold\">Last Uploaded Image:</h3>\n      <img src={uploadedImageUrl} alt=\"Uploaded\" class=\"max-w-xs mt-2\">\n    </div>\n  {/if}\n\n  <div>\n    <h3 class=\"font-bold mb-2\">Existing Images:</h3>\n    <div class=\"grid grid-cols-3 gap-4\">\n      {#each imageList as file}\n        <div class=\"border p-2\">\n          <p class=\"text-sm mb-2\">{file.name}</p>\n          <button\n            on:click={() => handleDelete(file.name)}\n            class=\"bg-red-500 text-white px-2 py-1 rounded text-sm\">\n            Delete\n          </button>\n        </div>\n      {/each}\n    </div>\n  </div>\n</div>\n"],"names":[],"mappings":";;;;;;;;SAKW,oBAAiB;;IAEtB,QAAQ,KAAK,OAAW,IAAA,KAAK,EAAE;AAAA,IAC/B,SAAS,KAAK,OAAW,IAAA,KAAK,EAAE;AAAA,IAChC,qBAAqB,KAAK,OAAM,IAAK,KAAK,CAAC;AAAA,IAC3C,YAAY,KAAK,OAAM;AAAA;;;;;MAIvB;;;AAgEiC,SAAA,6CAAA,cAAA,QAAA,cAIhC,CAAA,CAAA,gJAAA,aAAa,WAAW,4HAMtB,cAAY,UAAA;AAEL,WAAA,YAAA,UAAA,OAAA,KAAK,IAAE,IAAA,CAAA,yCAAA,cAAA,SAMV,OAAO,QAAQ,kBAAiB,CACpC,EAAA,MAAM,GAAG,CAAC,MAAS,GAAA,CAAC,KAAK,CAAC,EAAA,EAAI,KAAK,GAAG,IAA0B,sBAAA,KAAK,SAAS,SAAS,KAGtC,CAAA,CAAA,8FAAA,OAAA,KAAK,KAAK,yCACrC,KAAK,WAAW,CACpC,QAAA,KAAK,QACE,OAAA,cAAA,OAAA,KAAK,OAAK,CAAA,CAAA;;;ACZrB,eAAe,kBAAkB,WAAW;AACjD,MAAI,CAAC,WAAW;AACd,UAAM,IAAI,MAAM,wBAAwB;AAAA,EAC5C;AAEE,MAAI;AACF,UAAM,EAAE,MAAM,MAAO,IAAG,MAAM,SAAS,QACpC,KAAK,UAAU,EACf,KAAK,SAAS;AAEjB,QAAI,OAAO;AACT,YAAM;AAAA,IACZ;AAEI,WAAO,QAAQ,CAAE;AAAA,EAClB,SAAQ,OAAO;AACd,YAAQ,MAAM,yBAAyB,KAAK;AAC5C,UAAM;AAAA,EACV;AACA;;MCzGM,kBAAkB,SAAS,CAAC;MAE5B,YAAS,CAAA;iBAoCE,aAAU;;AAErB,kBAAkB,MAAA,kBAAkB,gBAAgB,EAAE;AAAA,aAC/C,OAAK;AACZ,cAAQ,MAAM,0BAA0B,KAAK;AAAA;;;QAc1C,iBAAe;AACpB,iBAAU;AAAA;;+KAWD,UAAQ,aAAA;4CACE,SAAO,CAAA,CAAA,IAAA,OAAG,QAAQ,IAAI,CAAA;AAAA,EAc5B,CAAA,CAAA,oVAoBJ,WAAS,UAAA;AAEa,WAAA,mDAAA,OAAA,KAAK,IAAI,CAAA;AAAA;;;;;"}
