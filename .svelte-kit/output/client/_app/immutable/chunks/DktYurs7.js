class i{constructor(){this.audioContext=null,this.players=new Map,this.loaded=!1,this.fallbackMode=!1}async init(){try{this.audioContext=new(window.AudioContext||window.webkitAudioContext),this.loaded=!0}catch{console.warn("AudioContext not available, running in fallback mode"),this.fallbackMode=!0}}async loadSound(o,e){if(this.fallbackMode){console.warn(`Audio system in fallback mode, skipping load of ${o}`);return}try{const t=await fetch(e);if(!t.ok)throw new Error(`Failed to load sound: ${t.statusText}`);const a=await t.arrayBuffer(),n=await this.audioContext.decodeAudioData(a);this.players.set(o,n)}catch(t){console.warn(`Failed to load sound ${o}, continuing without audio:`,t),this.fallbackMode=!0}}async playAmbient(o,e={}){if(this.fallbackMode||!this.loaded||!this.players.has(o))return console.warn(`Audio system not available or sound "${o}" not found, continuing silently`),null;try{const t=this.audioContext.createBufferSource();t.buffer=this.players.get(o);const a=this.audioContext.createGain();return a.gain.value=e.volume||1,t.connect(a),a.connect(this.audioContext.destination),t.loop=e.loop!==void 0?e.loop:!0,t.start(),t}catch(t){return console.warn("Failed to play ambient sound:",t),null}}stopAmbient(o){if(o)try{o.stop()}catch(e){console.warn("Failed to stop ambient sound:",e)}}}const l=new i;export{l as ambientSystem};
//# sourceMappingURL=DktYurs7.js.map
