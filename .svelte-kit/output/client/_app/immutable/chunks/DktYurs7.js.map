{"version":3,"file":"DktYurs7.js","sources":["../../../../../../src/lib/audio/ambientSystem.js"],"sourcesContent":["class AmbientSystem {\n  constructor() {\n    this.audioContext = null;\n    this.players = new Map();\n    this.loaded = false;\n    this.fallbackMode = false;\n  }\n\n  async init() {\n    try {\n      this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      this.loaded = true;\n    } catch (e) {\n      console.warn('AudioContext not available, running in fallback mode');\n      this.fallbackMode = true;\n    }\n  }\n\n  async loadSound(name, url) {\n    if (this.fallbackMode) {\n      console.warn(`Audio system in fallback mode, skipping load of ${name}`);\n      return;\n    }\n\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`Failed to load sound: ${response.statusText}`);\n      }\n      const arrayBuffer = await response.arrayBuffer();\n      const audioBuffer = await this.audioContext.decodeAudioData(arrayBuffer);\n      this.players.set(name, audioBuffer);\n    } catch (e) {\n      console.warn(`Failed to load sound ${name}, continuing without audio:`, e);\n      this.fallbackMode = true;\n    }\n  }\n\n  async playAmbient(name, options = {}) {\n    if (this.fallbackMode || !this.loaded || !this.players.has(name)) {\n      console.warn(`Audio system not available or sound \"${name}\" not found, continuing silently`);\n      return null;\n    }\n\n    try {\n      const source = this.audioContext.createBufferSource();\n      source.buffer = this.players.get(name);\n      \n      const gainNode = this.audioContext.createGain();\n      gainNode.gain.value = options.volume || 1;\n      \n      source.connect(gainNode);\n      gainNode.connect(this.audioContext.destination);\n      \n      source.loop = options.loop !== undefined ? options.loop : true;\n      source.start();\n      \n      return source;\n    } catch (e) {\n      console.warn('Failed to play ambient sound:', e);\n      return null;\n    }\n  }\n\n  stopAmbient(source) {\n    if (source) {\n      try {\n        source.stop();\n      } catch (e) {\n        console.warn('Failed to stop ambient sound:', e);\n      }\n    }\n  }\n}\n\nexport const ambientSystem = new AmbientSystem();\n"],"names":["AmbientSystem","name","url","response","arrayBuffer","audioBuffer","e","options","source","gainNode","ambientSystem"],"mappings":"AAAA,MAAMA,CAAc,CAClB,aAAc,CACZ,KAAK,aAAe,KACpB,KAAK,QAAU,IAAI,IACnB,KAAK,OAAS,GACd,KAAK,aAAe,EACxB,CAEE,MAAM,MAAO,CACX,GAAI,CACF,KAAK,aAAe,IAAK,OAAO,cAAgB,OAAO,oBACvD,KAAK,OAAS,EACf,MAAW,CACV,QAAQ,KAAK,sDAAsD,EACnE,KAAK,aAAe,EAC1B,CACA,CAEE,MAAM,UAAUC,EAAMC,EAAK,CACzB,GAAI,KAAK,aAAc,CACrB,QAAQ,KAAK,mDAAmDD,CAAI,EAAE,EACtE,MACN,CAEI,GAAI,CACF,MAAME,EAAW,MAAM,MAAMD,CAAG,EAChC,GAAI,CAACC,EAAS,GACZ,MAAM,IAAI,MAAM,yBAAyBA,EAAS,UAAU,EAAE,EAEhE,MAAMC,EAAc,MAAMD,EAAS,YAAa,EAC1CE,EAAc,MAAM,KAAK,aAAa,gBAAgBD,CAAW,EACvE,KAAK,QAAQ,IAAIH,EAAMI,CAAW,CACnC,OAAQC,EAAG,CACV,QAAQ,KAAK,wBAAwBL,CAAI,8BAA+BK,CAAC,EACzE,KAAK,aAAe,EAC1B,CACA,CAEE,MAAM,YAAYL,EAAMM,EAAU,GAAI,CACpC,GAAI,KAAK,cAAgB,CAAC,KAAK,QAAU,CAAC,KAAK,QAAQ,IAAIN,CAAI,EAC7D,eAAQ,KAAK,wCAAwCA,CAAI,kCAAkC,EACpF,KAGT,GAAI,CACF,MAAMO,EAAS,KAAK,aAAa,mBAAoB,EACrDA,EAAO,OAAS,KAAK,QAAQ,IAAIP,CAAI,EAErC,MAAMQ,EAAW,KAAK,aAAa,WAAY,EAC/C,OAAAA,EAAS,KAAK,MAAQF,EAAQ,QAAU,EAExCC,EAAO,QAAQC,CAAQ,EACvBA,EAAS,QAAQ,KAAK,aAAa,WAAW,EAE9CD,EAAO,KAAOD,EAAQ,OAAS,OAAYA,EAAQ,KAAO,GAC1DC,EAAO,MAAO,EAEPA,CACR,OAAQF,EAAG,CACV,eAAQ,KAAK,gCAAiCA,CAAC,EACxC,IACb,CACA,CAEE,YAAYE,EAAQ,CAClB,GAAIA,EACF,GAAI,CACFA,EAAO,KAAM,CACd,OAAQ,EAAG,CACV,QAAQ,KAAK,gCAAiC,CAAC,CACvD,CAEA,CACA,CAEY,MAACE,EAAgB,IAAIV"}
